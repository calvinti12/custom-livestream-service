worker_processes  auto;
error_log  /var/log/nginx/error.log;

events {
  worker_connections  1024;
}

# RTMP configuration
rtmp {
  server {
    listen 1935; # Listen on standard RTMP port
    chunk_size 4000; 

    # Ingestion and Transcoding application with live recording 
    application live {
      
      # Allows live input from above application
      live on; 
      drop_idle_publisher 10s; # Drop Publishing connections that havnt sent any stream data for over 10 seconds
      
      # only allow local playback (by ffmpeg for transcoding)
      allow play 127.0.0.1;
      deny play all;        # disable consuming the stream from nginx as rtmp from the internet

      # push stream to the local recorder application
      push rtmp://localhost:1935/recorder/stream name=<streamKey>;

      # Transcoding for adaptive bitrate streaming
      exec_push /usr/local/bin/ffmpeg -i rtmp://localhost:1935/$app/<streamKey> -async 1 -vsync -1
        -force_key_frames "expr:gte(t,n_forced*3)" -c:v libx264 -vprofile baseline -c:a aac -b:v 2800k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/hls/stream_hd720
        -force_key_frames "expr:gte(t,n_forced*3)" -c:v libx264 -vprofile baseline -c:a aac -b:v 1600k -b:a 128k -vf "scale=842:trunc(ow/a/2)*2" -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/hls/stream_mid
        -force_key_frames "expr:gte(t,n_forced*3)" -c:v libx264 -vprofile baseline -c:a aac -b:v 1000k -b:a 64k -vf "scale=640:trunc(ow/a/2)*2" -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/hls/stream_low
        -c copy -f flv rtmp://localhost:1935/hls/stream_src;

      allow publish all;
    }

    # The recorder application
    application recorder {
      
      live on;

      # only allow publish from local apps
      allow publish 127.0.0.1;
      deny publish all;

      deny play all;        # disable consuming the stream from nginx as rtmp from the internet

      # Enable live recording
      record all;
      record_path /mnt/recordings/;
      record_suffix .%d-%m-%Y.%H-%M.flv;
      record_unique on;

      # Transmux from flv to more widespread mp4 container format for content delivery
      exec_record_done /usr/local/bin/ffmpeg -y -i $path -codec copy $dirname/$basename.mp4;
    }

    # Alterantive Ingestion and Transcoding application without live recording 
    application live-alt {
      
      # Allows live input from above application
      live on; 
      drop_idle_publisher 10s; # Drop Publishing connections that havnt sent any stream data for over 10 seconds
      
      # only allow local playback (by ffmpeg for transcoding)
      allow play 127.0.0.1;
      deny play all;        # disable consuming the stream from nginx as rtmp from the internet

      # Transcoding for adaptive bitrate streaming
      exec_push /usr/local/bin/ffmpeg -i rtmp://localhost:1935/$app/<streamKey> -async 1 -vsync -1
        -force_key_frames "expr:gte(t,n_forced*3)" -c:v libx264 -vprofile baseline -c:a aac -b:v 2800k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/hls-alt/stream_hd720
        -force_key_frames "expr:gte(t,n_forced*3)" -c:v libx264 -vprofile baseline -c:a aac -b:v 1600k -b:a 128k -vf "scale=842:trunc(ow/a/2)*2" -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/hls-alt/stream_mid
        -force_key_frames "expr:gte(t,n_forced*3)" -c:v libx264 -vprofile baseline -c:a aac -b:v 1000k -b:a 64k -vf "scale=640:trunc(ow/a/2)*2" -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/hls-alt/stream_low
        -c copy -f flv rtmp://localhost:1935/hls-alt/stream_src;

      allow publish all;
    }    

    # primary hls application (pipeline with live recording)
    application hls {
      live on;

      # disable consuming the stream from nginx as rtmp
      deny play all; 

      # only allow publish from other local rtmp applications
      allow publish 127.0.0.1;
      deny publish all;

      # Enable HTTP Live Streaming
      hls on;
      hls_nested on;
      hls_fragment 5;
      hls_playlist_length 40;
      hls_path /mnt/hls/;

      # Instruct clients to adjust resolution according to bandwidth
      hls_variant _src    BANDWIDTH=5000000;                          # Source bitrate, source resolution
      hls_variant _hd720  BANDWIDTH=2928000,RESOLUTION=1280x720;      # High bitrate, HD 720p resolution
      hls_variant _mid    BANDWIDTH=1728000,RESOLUTION=842x480;       # moderate bitrate, 480p resolution
      hls_variant _low    BANDWIDTH=1064000,RESOLUTION=640x360;       # low bitrate, 360p resolution
    }

    # secondary hls application (pipeline without live recording)
    application hls-alt {
      live on;

      # disable consuming the stream from nginx as rtmp
      deny play all; 

      # only allow publish from other local rtmp applications
      allow publish 127.0.0.1;
      deny publish all;

      # Enable HTTP Live Streaming
      hls on;
      hls_nested on;
      hls_fragment 5;
      hls_playlist_length 40;
      hls_path /mnt/hls-alt/;

      # Instruct clients to adjust resolution according to bandwidth
      hls_variant _src    BANDWIDTH=5000000;                          # Source bitrate, source resolution
      hls_variant _hd720  BANDWIDTH=2928000,RESOLUTION=1280x720;      # High bitrate, HD 720p resolution
      hls_variant _mid    BANDWIDTH=1728000,RESOLUTION=842x480;       # moderate bitrate, 480p resolution
      hls_variant _low    BANDWIDTH=1064000,RESOLUTION=640x360;       # low bitrate, 360p resolution
    }
  }
}

# HTTP configuration
http {
  sendfile off;
  tcp_nopush on;
  directio 512;
  # aio on;
  
  # HTTP server required to serve the player and HLS fragments
  server {
    listen 8082;

    # Serve HLS fragments
    location /hls {
      types {
        application/vnd.apple.mpegurl m3u8;
        video/mp2t ts;
      }
      
      root /mnt;

      # Disable cache
      add_header Cache-Control no-cache;
      
      # CORS setup
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Expose-Headers' 'Content-Length';
            
      # allow CORS preflight requests
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
      }
    }
  }
}
